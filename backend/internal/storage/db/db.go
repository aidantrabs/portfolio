// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createExperienceStmt, err = db.PrepareContext(ctx, createExperience); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExperience: %w", err)
	}
	if q.createProjectStmt, err = db.PrepareContext(ctx, createProject); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProject: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteExperienceStmt, err = db.PrepareContext(ctx, deleteExperience); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExperience: %w", err)
	}
	if q.deleteProjectStmt, err = db.PrepareContext(ctx, deleteProject); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProject: %w", err)
	}
	if q.getAboutStmt, err = db.PrepareContext(ctx, getAbout); err != nil {
		return nil, fmt.Errorf("error preparing query GetAbout: %w", err)
	}
	if q.getCurrentExperienceStmt, err = db.PrepareContext(ctx, getCurrentExperience); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrentExperience: %w", err)
	}
	if q.getFeaturedProjectsStmt, err = db.PrepareContext(ctx, getFeaturedProjects); err != nil {
		return nil, fmt.Errorf("error preparing query GetFeaturedProjects: %w", err)
	}
	if q.getPastExperienceStmt, err = db.PrepareContext(ctx, getPastExperience); err != nil {
		return nil, fmt.Errorf("error preparing query GetPastExperience: %w", err)
	}
	if q.getProjectBySlugStmt, err = db.PrepareContext(ctx, getProjectBySlug); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectBySlug: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listExperienceStmt, err = db.PrepareContext(ctx, listExperience); err != nil {
		return nil, fmt.Errorf("error preparing query ListExperience: %w", err)
	}
	if q.listProjectsStmt, err = db.PrepareContext(ctx, listProjects); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjects: %w", err)
	}
	if q.searchProjectsStmt, err = db.PrepareContext(ctx, searchProjects); err != nil {
		return nil, fmt.Errorf("error preparing query SearchProjects: %w", err)
	}
	if q.updateExperienceStmt, err = db.PrepareContext(ctx, updateExperience); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExperience: %w", err)
	}
	if q.updateProjectStmt, err = db.PrepareContext(ctx, updateProject); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProject: %w", err)
	}
	if q.upsertAboutStmt, err = db.PrepareContext(ctx, upsertAbout); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertAbout: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createExperienceStmt != nil {
		if cerr := q.createExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExperienceStmt: %w", cerr)
		}
	}
	if q.createProjectStmt != nil {
		if cerr := q.createProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProjectStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteExperienceStmt != nil {
		if cerr := q.deleteExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExperienceStmt: %w", cerr)
		}
	}
	if q.deleteProjectStmt != nil {
		if cerr := q.deleteProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectStmt: %w", cerr)
		}
	}
	if q.getAboutStmt != nil {
		if cerr := q.getAboutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAboutStmt: %w", cerr)
		}
	}
	if q.getCurrentExperienceStmt != nil {
		if cerr := q.getCurrentExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrentExperienceStmt: %w", cerr)
		}
	}
	if q.getFeaturedProjectsStmt != nil {
		if cerr := q.getFeaturedProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFeaturedProjectsStmt: %w", cerr)
		}
	}
	if q.getPastExperienceStmt != nil {
		if cerr := q.getPastExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPastExperienceStmt: %w", cerr)
		}
	}
	if q.getProjectBySlugStmt != nil {
		if cerr := q.getProjectBySlugStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectBySlugStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listExperienceStmt != nil {
		if cerr := q.listExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listExperienceStmt: %w", cerr)
		}
	}
	if q.listProjectsStmt != nil {
		if cerr := q.listProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectsStmt: %w", cerr)
		}
	}
	if q.searchProjectsStmt != nil {
		if cerr := q.searchProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchProjectsStmt: %w", cerr)
		}
	}
	if q.updateExperienceStmt != nil {
		if cerr := q.updateExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExperienceStmt: %w", cerr)
		}
	}
	if q.updateProjectStmt != nil {
		if cerr := q.updateProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProjectStmt: %w", cerr)
		}
	}
	if q.upsertAboutStmt != nil {
		if cerr := q.upsertAboutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertAboutStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createExperienceStmt     *sql.Stmt
	createProjectStmt        *sql.Stmt
	createUserStmt           *sql.Stmt
	deleteExperienceStmt     *sql.Stmt
	deleteProjectStmt        *sql.Stmt
	getAboutStmt             *sql.Stmt
	getCurrentExperienceStmt *sql.Stmt
	getFeaturedProjectsStmt  *sql.Stmt
	getPastExperienceStmt    *sql.Stmt
	getProjectBySlugStmt     *sql.Stmt
	getUserByUsernameStmt    *sql.Stmt
	listExperienceStmt       *sql.Stmt
	listProjectsStmt         *sql.Stmt
	searchProjectsStmt       *sql.Stmt
	updateExperienceStmt     *sql.Stmt
	updateProjectStmt        *sql.Stmt
	upsertAboutStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createExperienceStmt:     q.createExperienceStmt,
		createProjectStmt:        q.createProjectStmt,
		createUserStmt:           q.createUserStmt,
		deleteExperienceStmt:     q.deleteExperienceStmt,
		deleteProjectStmt:        q.deleteProjectStmt,
		getAboutStmt:             q.getAboutStmt,
		getCurrentExperienceStmt: q.getCurrentExperienceStmt,
		getFeaturedProjectsStmt:  q.getFeaturedProjectsStmt,
		getPastExperienceStmt:    q.getPastExperienceStmt,
		getProjectBySlugStmt:     q.getProjectBySlugStmt,
		getUserByUsernameStmt:    q.getUserByUsernameStmt,
		listExperienceStmt:       q.listExperienceStmt,
		listProjectsStmt:         q.listProjectsStmt,
		searchProjectsStmt:       q.searchProjectsStmt,
		updateExperienceStmt:     q.updateExperienceStmt,
		updateProjectStmt:        q.updateProjectStmt,
		upsertAboutStmt:          q.upsertAboutStmt,
	}
}
